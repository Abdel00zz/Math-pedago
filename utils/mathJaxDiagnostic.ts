/**
 * üîç DIAGNOSTIC MATHJAX
 * Outil de diagnostic complet pour identifier les probl√®mes MathJax
 * Tapez `window.diagnoseMathJax()` dans la console F12
 */

export const diagnoseMathJax = () => {
    console.clear();
    console.log('üîç ========== DIAGNOSTIC MATHJAX ==========');
    console.log('');
    
    // 1. V√©rifier si MathJax est charg√©
    console.log('üì¶ 1. V√âRIFICATION DU CHARGEMENT DE MATHJAX');
    console.log('   window.MathJax existe:', !!window.MathJax);
    
    if (window.MathJax) {
        console.log('   ‚úÖ MathJax est charg√©!');
        console.log('   - typesetPromise:', !!window.MathJax.typesetPromise);
        console.log('   - typesetClear:', !!window.MathJax.typesetClear);
        console.log('   - startup:', !!window.MathJax.startup);
    } else {
        console.error('   ‚ùå MathJax N\'EST PAS CHARG√â!');
        console.error('   üîß Solution: V√©rifiez que le script MathJax est dans index.html');
        return;
    }
    
    console.log('');
    
    // 2. V√©rifier la configuration MathJax
    console.log('‚öôÔ∏è  2. CONFIGURATION MATHJAX');
    const config = (window as any).MathJax;
    if (config.tex) {
        console.log('   Configuration TeX:', config.tex);
    } else {
        console.log('   Configuration globale:', config);
    }
    
    console.log('');
    
    // 3. Rechercher les expressions LaTeX dans le DOM
    console.log('üîé 3. RECHERCHE D\'EXPRESSIONS LATEX DANS LE DOM');
    const allText = document.body.innerText;
    const dollarMatches = allText.match(/\$[^$]+\$/g);
    const doubleDollarMatches = allText.match(/\$\$[^$]+\$\$/g);
    
    console.log('   Expressions $...$ trouv√©es:', dollarMatches?.length || 0);
    if (dollarMatches && dollarMatches.length > 0) {
        console.log('   Exemples:', dollarMatches.slice(0, 5));
    }
    
    console.log('   Expressions $$...$$ trouv√©es:', doubleDollarMatches?.length || 0);
    if (doubleDollarMatches && doubleDollarMatches.length > 0) {
        console.log('   Exemples:', doubleDollarMatches.slice(0, 3));
    }
    
    console.log('');
    
    // 4. V√©rifier les conteneurs MathJax rendus
    console.log('üìä 4. CONTENEURS MATHJAX RENDUS');
    const mjxContainers = document.querySelectorAll('mjx-container');
    console.log('   Conteneurs mjx-container:', mjxContainers.length);
    
    if (mjxContainers.length > 0) {
        console.log('   ‚úÖ MathJax a rendu des formules!');
        console.log('   Premier conteneur:', mjxContainers[0]);
    } else {
        console.warn('   ‚ö†Ô∏è  AUCUN conteneur MathJax trouv√©!');
        if (dollarMatches && dollarMatches.length > 0) {
            console.error('   ‚ùå Des expressions $ $ existent mais ne sont PAS rendues!');
        }
    }
    
    console.log('');
    
    // 5. V√©rifier les √©l√©ments avec classe math-content
    console.log('üéØ 5. √âL√âMENTS MATH-CONTENT');
    const mathContentElements = document.querySelectorAll('.math-content');
    console.log('   √âl√©ments .math-content:', mathContentElements.length);
    
    if (mathContentElements.length > 0) {
        mathContentElements.forEach((el, idx) => {
            if (idx < 3) {
                const hasDollar = /\$/.test(el.innerHTML);
                const hasMjx = el.querySelector('mjx-container') !== null;
                console.log(`   Element ${idx + 1}:`, {
                    hasDollarSigns: hasDollar,
                    hasMathJaxRender: hasMjx,
                    innerHTML: el.innerHTML.substring(0, 100) + '...'
                });
            }
        });
    }
    
    console.log('');
    
    // 6. Test de rendu manuel
    console.log('üß™ 6. TEST DE RENDU MANUEL');
    console.log('   Pour tester manuellement, ex√©cutez:');
    console.log('   window.MathJax.typesetPromise([document.body])');
    
    console.log('');
    console.log('========================================');
    console.log('');
    
    // R√©sum√©
    if (!window.MathJax) {
        console.error('‚ùå PROBL√àME: MathJax n\'est pas charg√©');
        console.log('üîß SOLUTION: Ajoutez le script MathJax dans index.html');
    } else if (dollarMatches && dollarMatches.length > 0 && mjxContainers.length === 0) {
        console.error('‚ùå PROBL√àME: Des expressions $ $ existent mais ne sont PAS rendues');
        console.log('üîß SOLUTION POSSIBLE 1: Les d√©limiteurs ne sont pas configur√©s');
        console.log('üîß SOLUTION POSSIBLE 2: MathJax ne d√©tecte pas les expressions');
        console.log('üîß SOLUTION POSSIBLE 3: Conflit avec le traitement Markdown');
        console.log('');
        console.log('Essayez de forcer le rendu:');
        console.log('window.MathJax.typesetPromise([document.body])');
    } else if (mjxContainers.length > 0) {
        console.log('‚úÖ TOUT FONCTIONNE! MathJax rend correctement les formules');
    } else {
        console.log('‚ÑπÔ∏è  Aucune expression LaTeX trouv√©e dans le DOM');
    }
};

// Exposer globalement pour utilisation dans la console
if (typeof window !== 'undefined') {
    (window as any).diagnoseMathJax = diagnoseMathJax;
    console.log('üîç Diagnostic MathJax disponible! Tapez: window.diagnoseMathJax()');
}
